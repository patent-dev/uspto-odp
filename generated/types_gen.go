// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for PatentDownloadRequestFormat.
const (
	PatentDownloadRequestFormatCsv  PatentDownloadRequestFormat = "csv"
	PatentDownloadRequestFormatJson PatentDownloadRequestFormat = "json"
)

// Defines values for PetitionDecisionDownloadRequestFormat.
const (
	PetitionDecisionDownloadRequestFormatCsv  PetitionDecisionDownloadRequestFormat = "csv"
	PetitionDecisionDownloadRequestFormatJson PetitionDecisionDownloadRequestFormat = "json"
)

// Defines values for PetitionDecisionSortOrder.
const (
	PetitionDecisionSortOrderAsc   PetitionDecisionSortOrder = "Asc"
	PetitionDecisionSortOrderAsc1  PetitionDecisionSortOrder = "asc"
	PetitionDecisionSortOrderDesc  PetitionDecisionSortOrder = "Desc"
	PetitionDecisionSortOrderDesc1 PetitionDecisionSortOrder = "desc"
)

// Defines values for SortOrder.
const (
	SortOrderAsc   SortOrder = "Asc"
	SortOrderAsc1  SortOrder = "asc"
	SortOrderDesc  SortOrder = "Desc"
	SortOrderDesc1 SortOrder = "desc"
)

// ApplicationMetaData Represents patent application meta data properties
type ApplicationMetaData struct {
	ApplicantBag *[]struct {
		ApplicantNameText        *string `json:"applicantNameText,omitempty"`
		CorrespondenceAddressBag *[]struct {
			CityName              *string `json:"cityName,omitempty"`
			CountryCode           *string `json:"countryCode,omitempty"`
			CountryName           *string `json:"countryName,omitempty"`
			GeographicRegionCode  *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName  *string `json:"geographicRegionName,omitempty"`
			NameLineOneText       *string `json:"nameLineOneText,omitempty"`
			NameLineTwoText       *string `json:"nameLineTwoText,omitempty"`
			PostalAddressCategory *string `json:"postalAddressCategory,omitempty"`
		} `json:"correspondenceAddressBag,omitempty"`
		CountryCode   *string `json:"countryCode,omitempty"`
		FirstName     *string `json:"firstName,omitempty"`
		LastName      *string `json:"lastName,omitempty"`
		MiddleName    *string `json:"middleName,omitempty"`
		NamePrefix    *string `json:"namePrefix,omitempty"`
		NameSuffix    *string `json:"nameSuffix,omitempty"`
		PreferredName *string `json:"preferredName,omitempty"`
	} `json:"applicantBag,omitempty"`
	ApplicationConfirmationNumber    *float32 `json:"applicationConfirmationNumber,omitempty"`
	ApplicationStatusCode            *int     `json:"applicationStatusCode,omitempty"`
	ApplicationStatusDate            *string  `json:"applicationStatusDate,omitempty"`
	ApplicationStatusDescriptionText *string  `json:"applicationStatusDescriptionText,omitempty"`
	ApplicationTypeCategory          *string  `json:"applicationTypeCategory,omitempty"`

	// ApplicationTypeCode Code corresponding to Utility, Plant, Design, or Reissue
	ApplicationTypeCode      *string `json:"applicationTypeCode,omitempty"`
	ApplicationTypeLabelName *string `json:"applicationTypeLabelName,omitempty"`

	// Class The first hierarchical level in the USPC classification schedule
	Class *string `json:"class,omitempty"`

	// CpcClassificationBag Collection of Classifications for CPC
	CpcClassificationBag *[]string `json:"cpcClassificationBag,omitempty"`

	// CustomerNumber Correspondence address of the application inherited from the customer.
	CustomerNumber          *int    `json:"customerNumber,omitempty"`
	DocketNumber            *string `json:"docketNumber,omitempty"`
	EarliestPublicationDate *string `json:"earliestPublicationDate,omitempty"`

	// EarliestPublicationNumber Publication number corresponding to the earliest publication
	EarliestPublicationNumber *string `json:"earliestPublicationNumber,omitempty"`

	// EffectiveFilingDate The date according to PTO criteria that the patent case qualified as having been 'filed'.  The effective filing date is the same or later than the Filing Date.  The filing date can be changed due to a subsequent action on an application patent case.
	EffectiveFilingDate *string `json:"effectiveFilingDate,omitempty"`

	// EntityStatusData Indicates the applicant's entity status
	EntityStatusData *struct {
		// BusinessEntityStatusCategory Status of business entity being established for the purpose of paying a fee such as a filing fee and a maintenance fee
		BusinessEntityStatusCategory *string `json:"businessEntityStatusCategory,omitempty"`

		// SmallEntityStatusIndicator Indicates whether the applicant qualifies for small entity status
		SmallEntityStatusIndicator *bool `json:"smallEntityStatusIndicator,omitempty"`
	} `json:"entityStatusData,omitempty"`

	// ExaminerNameText Name of patent examiner
	ExaminerNameText *string `json:"examinerNameText,omitempty"`

	// FilingDate The date assigned by the Patent Office that identifies when an application meets certain criteria to qualify as having been filed. Refers to ST.9 INID Code 22.
	FilingDate                   *string `json:"filingDate,omitempty"`
	FirstApplicantName           *string `json:"firstApplicantName,omitempty"`
	FirstInventorName            *string `json:"firstInventorName,omitempty"`
	FirstInventorToFileIndicator *string `json:"firstInventorToFileIndicator,omitempty"`
	GrantDate                    *string `json:"grantDate,omitempty"`

	// GroupArtUnitNumber GAU Code
	GroupArtUnitNumber *string `json:"groupArtUnitNumber,omitempty"`

	// InternationalRegistrationNumber The number assigned by the International Bureau to an international registration upon registering an industrial design, a trademark or other type of IPR in the International Register
	InternationalRegistrationNumber *string `json:"internationalRegistrationNumber,omitempty"`

	// InternationalRegistrationPublicationDate The date that the IPR is published by the International Bureau
	InternationalRegistrationPublicationDate *string `json:"internationalRegistrationPublicationDate,omitempty"`
	InventionTitle                           *string `json:"inventionTitle,omitempty"`
	InventorBag                              *[]struct {
		CorrespondenceAddressBag *[]struct {
			CityName              *string `json:"cityName,omitempty"`
			CountryCode           *string `json:"countryCode,omitempty"`
			CountryName           *string `json:"countryName,omitempty"`
			GeographicRegionCode  *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName  *string `json:"geographicRegionName,omitempty"`
			NameLineOneText       *string `json:"nameLineOneText,omitempty"`
			NameLineTwoText       *string `json:"nameLineTwoText,omitempty"`
			PostalAddressCategory *string `json:"postalAddressCategory,omitempty"`
		} `json:"correspondenceAddressBag,omitempty"`
		CountryCode      *string `json:"countryCode,omitempty"`
		FirstName        *string `json:"firstName,omitempty"`
		InventorNameText *string `json:"inventorNameText,omitempty"`
		LastName         *string `json:"lastName,omitempty"`
		MiddleName       *string `json:"middleName,omitempty"`
		NamePrefix       *string `json:"namePrefix,omitempty"`
		NameSuffix       *string `json:"nameSuffix,omitempty"`
		PreferredName    *string `json:"preferredName,omitempty"`
	} `json:"inventorBag,omitempty"`

	// NationalStageIndicator Indicates whether this application is a national application which entered the national stage from an international PCT application
	NationalStageIndicator *bool   `json:"nationalStageIndicator,omitempty"`
	PatentNumber           *string `json:"patentNumber,omitempty"`
	PctPublicationDate     *string `json:"pctPublicationDate,omitempty"`

	// PctPublicationNumber The unique identifier assigned to the publication of an international patent application in the PCT Gazette by the International Bureau (IB) of the World Intellectual Property Organization (WIPO).
	PctPublicationNumber         *string   `json:"pctPublicationNumber,omitempty"`
	PublicationCategoryBag       *[]string `json:"publicationCategoryBag,omitempty"`
	PublicationDateBag           *[]string `json:"publicationDateBag,omitempty"`
	PublicationSequenceNumberBag *[]string `json:"publicationSequenceNumberBag,omitempty"`

	// Subclass The second highest hierarchical level  in the USP C classification schedule
	Subclass *string `json:"subclass,omitempty"`

	// UspcSymbolText The first hierarchical level in the USPC classification schedule/ The second highest hierarchical level in the USP C classification schedule
	UspcSymbolText *string `json:"uspcSymbolText,omitempty"`
}

// Assignment The collection of national assignments related to a patent
type Assignment struct {
	AssigneeBag *[]struct {
		AssigneeAddress *struct {
			AddressLineOneText   *string `json:"addressLineOneText,omitempty"`
			AddressLineTwoText   *string `json:"addressLineTwoText,omitempty"`
			CityName             *string `json:"cityName,omitempty"`
			CountryName          *string `json:"countryName,omitempty"`
			GeographicRegionCode *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName *string `json:"geographicRegionName,omitempty"`
			PostalCode           *string `json:"postalCode,omitempty"`
		} `json:"assigneeAddress,omitempty"`
		AssigneeNameText *string `json:"assigneeNameText,omitempty"`
	} `json:"assigneeBag,omitempty"`
	AssignmentDocumentLocationURI *string `json:"assignmentDocumentLocationURI,omitempty"`

	// AssignmentMailedDate The date an assignment request was mailed to the office or received by the office
	AssignmentMailedDate   *string `json:"assignmentMailedDate,omitempty"`
	AssignmentReceivedDate *string `json:"assignmentReceivedDate,omitempty"`
	AssignmentRecordedDate *string `json:"assignmentRecordedDate,omitempty"`
	AssignorBag            *[]struct {
		AssignorName  *string `json:"assignorName,omitempty"`
		ExecutionDate *string `json:"executionDate,omitempty"`
	} `json:"assignorBag,omitempty"`

	// ConveyanceText A description of the nature of the interest conveyed or transaction to be recorded in an assignment. Examples of the types of descriptions `include:` assignment, security agreement, merger, change of name, license, foreclosure, lien,
	ConveyanceText           *string `json:"conveyanceText,omitempty"`
	CorrespondenceAddressBag *[]struct {
		AddressLineFourText   *string `json:"addressLineFourText,omitempty"`
		AddressLineOneText    *string `json:"addressLineOneText,omitempty"`
		AddressLineThreeText  *string `json:"addressLineThreeText,omitempty"`
		AddressLineTwoText    *string `json:"addressLineTwoText,omitempty"`
		CorrespondentNameText *string `json:"correspondentNameText,omitempty"`
	} `json:"correspondenceAddressBag,omitempty"`

	// FrameNumber 1-4 digit number that identifies the frame number to be used to locate the first image(page) of the assignment on microfilm.
	FrameNumber        *string `json:"frameNumber,omitempty"`
	PageTotalQuantity  *int    `json:"pageTotalQuantity,omitempty"`
	ReelAndFrameNumber *string `json:"reelAndFrameNumber,omitempty"`

	// ReelNumber 1-6 digit number identifies the reel number to be used to locate the assignment on microfilm.
	ReelNumber *string `json:"reelNumber,omitempty"`
}

// BdssResponseBag defines model for BdssResponseBag.
type BdssResponseBag struct {
	BulkDataProductBag *[]BulkDataProduct `json:"bulkDataProductBag,omitempty"`
	Count              *int               `json:"count,omitempty"`
	Facets             *Facets            `json:"facets,omitempty"`
}

// BdssResponseProductBag defines model for BdssResponseProductBag.
type BdssResponseProductBag struct {
	BulkDataProductBag *[]BulkDataProduct `json:"bulkDataProductBag,omitempty"`
	Count              *int               `json:"count,omitempty"`
}

// BulkDataProduct defines model for BulkDataProduct.
type BulkDataProduct struct {
	DaysOfWeekText                  *string             `json:"daysOfWeekText,omitempty"`
	LastModifiedDateTime            *string             `json:"lastModifiedDateTime,omitempty"`
	MimeTypeIdentifierArrayText     *[]string           `json:"mimeTypeIdentifierArrayText,omitempty"`
	ProductDataSetArrayText         *[]string           `json:"productDataSetArrayText,omitempty"`
	ProductDataSetCategoryArrayText *[]string           `json:"productDataSetCategoryArrayText,omitempty"`
	ProductDescriptionText          *string             `json:"productDescriptionText,omitempty"`
	ProductFileBag                  *ProductFileBag     `json:"productFileBag,omitempty"`
	ProductFileTotalQuantity        *float32            `json:"productFileTotalQuantity,omitempty"`
	ProductFrequencyText            *string             `json:"productFrequencyText,omitempty"`
	ProductFromDate                 *openapi_types.Date `json:"productFromDate,omitempty"`
	ProductIdentifier               *string             `json:"productIdentifier,omitempty"`
	ProductLabelArrayText           *[]string           `json:"productLabelArrayText,omitempty"`
	ProductTitleText                *string             `json:"productTitleText,omitempty"`
	ProductToDate                   *openapi_types.Date `json:"productToDate,omitempty"`
	ProductTotalFileSize            *float32            `json:"productTotalFileSize,omitempty"`
}

// ChildContinuityData defines model for ChildContinuityData.
type ChildContinuityData struct {
	ChildApplicationFilingDate *string `json:"childApplicationFilingDate,omitempty"`

	// ChildApplicationNumberText Application number of the child application, which is the unique value assigned by the USPTO to a patent application upon receipt
	ChildApplicationNumberText            *string  `json:"childApplicationNumberText,omitempty"`
	ChildApplicationStatusCode            *float32 `json:"childApplicationStatusCode,omitempty"`
	ChildApplicationStatusDescriptionText *string  `json:"childApplicationStatusDescriptionText,omitempty"`
	ChildPatentNumber                     *string  `json:"childPatentNumber,omitempty"`
	ClaimParentageTypeCode                *string  `json:"claimParentageTypeCode,omitempty"`
	ClaimParentageTypeCodeDescriptionText *string  `json:"claimParentageTypeCodeDescriptionText,omitempty"`
	FirstInventorToFileIndicator          *bool    `json:"firstInventorToFileIndicator,omitempty"`
	ParentApplicationNumberText           *string  `json:"parentApplicationNumberText,omitempty"`
}

// DocumentBag defines model for DocumentBag.
type DocumentBag struct {
	DocumentBag *[]struct {
		ApplicationNumberText       *string `json:"applicationNumberText,omitempty"`
		DocumentCode                *string `json:"documentCode,omitempty"`
		DocumentCodeDescriptionText *string `json:"documentCodeDescriptionText,omitempty"`
		DocumentDirectionCategory   *string `json:"documentDirectionCategory,omitempty"`
		DocumentIdentifier          *string `json:"documentIdentifier,omitempty"`
		DownloadOptionBag           *[]struct {
			DownloadUrl        *string `json:"downloadUrl,omitempty"`
			MimeTypeIdentifier *string `json:"mimeTypeIdentifier,omitempty"`
			PageTotalQuantity  *int    `json:"pageTotalQuantity,omitempty"`
		} `json:"downloadOptionBag,omitempty"`
		OfficialDate *string `json:"officialDate,omitempty"`
	} `json:"documentBag,omitempty"`
}

// EventData The date the patent case action was recorded.
type EventData struct {
	EventCode *string `json:"eventCode,omitempty"`

	// EventDate The date the patent case action was recorded.
	EventDate            *string `json:"eventDate,omitempty"`
	EventDescriptionText *string `json:"eventDescriptionText,omitempty"`
}

// Facets defines model for Facets.
type Facets struct {
	MimeTypeIdentifierArrayText *[]struct {
		Count *int    `json:"count,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"mimeTypeIdentifierArrayText,omitempty"`
	ProductCategoryArrayText *[]struct {
		Count *int    `json:"count,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"productCategoryArrayText,omitempty"`
	ProductDataSetArrayText *[]struct {
		Count *int    `json:"count,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"productDataSetArrayText,omitempty"`
	ProductFrequencyArrayText *[]struct {
		Count *int    `json:"count,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"productFrequencyArrayText,omitempty"`
	ProductLabelArrayText *[]struct {
		Count *int    `json:"count,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"productLabelArrayText,omitempty"`
}

// Filter Add filters to your search request by providing filter name and filter value where name in filter request some field in data set.
type Filter struct {
	Name  *string   `json:"name,omitempty"`
	Value *[]string `json:"value,omitempty"`
}

// ForeignPriority defines model for ForeignPriority.
type ForeignPriority struct {
	ApplicationNumberText *string `json:"applicationNumberText,omitempty"`
	FilingDate            *string `json:"filingDate,omitempty"`
	IpOfficeName          *string `json:"ipOfficeName,omitempty"`
}

// GrantFileMetaData Contains patent grant zip and xml file meta data for an application
type GrantFileMetaData struct {
	FileCreateDateTime *string `json:"fileCreateDateTime,omitempty"`
	FileLocationURI    *string `json:"fileLocationURI,omitempty"`
	ProductIdentifier  *string `json:"productIdentifier,omitempty"`
	XmlFileName        *string `json:"xmlFileName,omitempty"`
	ZipFileName        *string `json:"zipFileName,omitempty"`
}

// PGPubFileMetaData Contains pgpub zip and xml file meta data for an application
type PGPubFileMetaData struct {
	FileCreateDateTime *string `json:"fileCreateDateTime,omitempty"`
	FileLocationURI    *string `json:"fileLocationURI,omitempty"`
	ProductIdentifier  *string `json:"productIdentifier,omitempty"`
	XmlFileName        *string `json:"xmlFileName,omitempty"`
	ZipFileName        *string `json:"zipFileName,omitempty"`
}

// Pagination Pagination information.
type Pagination struct {
	// Limit Maximum number of patent records to be returned in response
	Limit *int32 `json:"limit,omitempty"`

	// Offset Start
	Offset *int32 `json:"offset,omitempty"`
}

// ParentContinuityData defines model for ParentContinuityData.
type ParentContinuityData struct {
	ChildApplicationNumberText            *string `json:"childApplicationNumberText,omitempty"`
	ClaimParentageTypeCode                *string `json:"claimParentageTypeCode,omitempty"`
	ClaimParentageTypeCodeDescriptionText *string `json:"claimParentageTypeCodeDescriptionText,omitempty"`

	// FirstInventorToFileIndicator Indicates first inventor to file.
	FirstInventorToFileIndicator           *bool   `json:"firstInventorToFileIndicator,omitempty"`
	ParentApplicationFilingDate            *string `json:"parentApplicationFilingDate,omitempty"`
	ParentApplicationNumberText            *string `json:"parentApplicationNumberText,omitempty"`
	ParentApplicationStatusCode            *int    `json:"parentApplicationStatusCode,omitempty"`
	ParentApplicationStatusDescriptionText *string `json:"parentApplicationStatusDescriptionText,omitempty"`
	ParentPatentNumber                     *string `json:"parentPatentNumber,omitempty"`
}

// PatentDataResponse This json structure represents all data fields possible for a patent application. Not all fields mentioned here will be returned in API response, only fields that have data should present in the response.
type PatentDataResponse struct {
	Count  *int `json:"count,omitempty"`
	Facets *[]struct {
		ApplicationStatusCode *[]struct {
			Count *int    `json:"count,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"applicationStatusCode,omitempty"`
	} `json:"facets,omitempty"`
	PatentFileWrapperDataBag *[]struct {
		// ApplicationMetaData Represents patent application meta data properties
		ApplicationMetaData *ApplicationMetaData `json:"applicationMetaData,omitempty"`

		// ApplicationNumberText Free format of application number
		ApplicationNumberText *string                `json:"applicationNumberText,omitempty"`
		AssignmentBag         *[]Assignment          `json:"assignmentBag,omitempty"`
		ChildContinuityBag    *[]ChildContinuityData `json:"childContinuityBag,omitempty"`

		// CorrespondenceAddressBag Collection of correspondences
		CorrespondenceAddressBag *[]struct {
			AddressLineOneText    *string `json:"addressLineOneText,omitempty"`
			AddressLineTwoText    *string `json:"addressLineTwoText,omitempty"`
			CityName              *string `json:"cityName,omitempty"`
			CountryCode           *string `json:"countryCode,omitempty"`
			CountryName           *string `json:"countryName,omitempty"`
			GeographicRegionCode  *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName  *string `json:"geographicRegionName,omitempty"`
			NameLineOneText       *string `json:"nameLineOneText,omitempty"`
			NameLineTwoText       *string `json:"nameLineTwoText,omitempty"`
			PostalAddressCategory *string `json:"postalAddressCategory,omitempty"`
			PostalCode            *string `json:"postalCode,omitempty"`
		} `json:"correspondenceAddressBag,omitempty"`
		EventDataBag       *[]EventData       `json:"eventDataBag,omitempty"`
		ForeignPriorityBag *[]ForeignPriority `json:"foreignPriorityBag,omitempty"`

		// GrantDocumentMetaData Contains patent grant zip and xml file meta data for an application
		GrantDocumentMetaData *GrantFileMetaData      `json:"grantDocumentMetaData,omitempty"`
		LastIngestionDateTime *string                 `json:"lastIngestionDateTime,omitempty"`
		ParentContinuityBag   *[]ParentContinuityData `json:"parentContinuityBag,omitempty"`

		// PatentTermAdjustmentData Patent term adjustment data
		PatentTermAdjustmentData *PatentTermAdjustment `json:"patentTermAdjustmentData,omitempty"`

		// PgpubDocumentMetaData Contains pgpub zip and xml file meta data for an application
		PgpubDocumentMetaData *PGPubFileMetaData `json:"pgpubDocumentMetaData,omitempty"`

		// RecordAttorney An attorney selected by the applicant or owner of an intellectual property to represent them before the national office.
		RecordAttorney *RecordAttorney `json:"recordAttorney,omitempty"`
	} `json:"patentFileWrapperDataBag,omitempty"`

	// RequestIdentifier Optional request tracking identifier
	RequestIdentifier *string `json:"requestIdentifier,omitempty"`
}

// PatentDownloadRequest defines model for PatentDownloadRequest.
type PatentDownloadRequest struct {
	Fields  *[]string `json:"fields,omitempty"`
	Filters *[]Filter `json:"filters,omitempty"`

	// Format Download format. csv or json
	Format *PatentDownloadRequestFormat `json:"format,omitempty"`

	// Pagination Pagination information.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Q Search by field value or pass opensearch string query syntax
	Q            *string  `json:"q,omitempty"`
	RangeFilters *[]Range `json:"rangeFilters,omitempty"`
	Sort         *[]Sort  `json:"sort,omitempty"`
}

// PatentDownloadRequestFormat Download format. csv or json
type PatentDownloadRequestFormat string

// PatentSearchRequest defines model for PatentSearchRequest.
type PatentSearchRequest struct {
	Facets  *[]string `json:"facets,omitempty"`
	Fields  *[]string `json:"fields,omitempty"`
	Filters *[]Filter `json:"filters,omitempty"`

	// Pagination Pagination information.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Q Search by field value or pass opensearch string query syntax
	Q            *string  `json:"q,omitempty"`
	RangeFilters *[]Range `json:"rangeFilters,omitempty"`
	Sort         *[]Sort  `json:"sort,omitempty"`
}

// PatentTermAdjustment Patent term adjustment data
type PatentTermAdjustment struct {
	// ADelayQuantity A delays quantity number of adjustments to the term of the patent based upon USPTO delays included in the PTA determination that is mailed as part of the ISSUE NOTIFICATION LETTER.
	ADelayQuantity *int `json:"aDelayQuantity,omitempty"`

	// AdjustmentTotalQuantity Patent term adjustment total quantity number that is a summation of NONOVERLAPPING USPTO DELAYS (+/- PTO MANUAL ADJUSTMENTS) - APPLICANT DELAYS.
	AdjustmentTotalQuantity *int `json:"adjustmentTotalQuantity,omitempty"`

	// ApplicantDayDelayQuantity Patent term adjustment applicant delays quantity number of the patent term due to the Applicant's failure to engage in reasonable efforts to conclude prosecution of the application for the cumulative period in excess of three
	ApplicantDayDelayQuantity *int `json:"applicantDayDelayQuantity,omitempty"`

	// BDelayQuantity B delays quantity number of adjustments to the term of the patent based upon the patent failing to issue within three years of the actual filing date of the application at the time that the issue notification letter is generated and an issue date has been established.
	BDelayQuantity *int `json:"bDelayQuantity,omitempty"`

	// CDelayQuantity C delays quantity number of adjustments to the term of the patent based upon USPTO delays caused by interference proceedings, secrecy orders, and successful appellate reviews.
	CDelayQuantity *int `json:"cDelayQuantity,omitempty"`

	// NonOverlappingDayQuantity Patent term adjustment non overlapping days quantity number of overall summation of the USPTO delays minus any overlapping days.
	NonOverlappingDayQuantity *float32 `json:"nonOverlappingDayQuantity,omitempty"`

	// OverlappingDayQuantity Patent term adjustment overlapping days quantity number that reflects the calculation of overlapping delays consistent with the federal circuit's interpretation.
	OverlappingDayQuantity             *float32 `json:"overlappingDayQuantity,omitempty"`
	PatentTermAdjustmentHistoryDataBag *[]struct {
		ApplicantDayDelayQuantity *int `json:"applicantDayDelayQuantity,omitempty"`

		// EventDate The date that the symbol was assigned to the patent document
		EventDate            *string  `json:"eventDate,omitempty"`
		EventDescriptionText *string  `json:"eventDescriptionText,omitempty"`
		EventSequenceNumber  *float32 `json:"eventSequenceNumber,omitempty"`

		// IpOfficeDayDelayQuantity Number of days the UPSTO personnel adjusting the calculation to increase or decrease the patent term adjustment based upon a request for reconsideration of the patent term adjustment.
		IpOfficeDayDelayQuantity       *int     `json:"ipOfficeDayDelayQuantity,omitempty"`
		OriginatingEventSequenceNumber *float32 `json:"originatingEventSequenceNumber,omitempty"`
		PtaPTECode                     *string  `json:"ptaPTECode,omitempty"`
	} `json:"patentTermAdjustmentHistoryDataBag,omitempty"`
}

// PetitionDecision defines model for PetitionDecision.
type PetitionDecision struct {
	ActionTakenByCourtName                  *string   `json:"actionTakenByCourtName,omitempty"`
	ApplicationNumberText                   *string   `json:"applicationNumberText,omitempty"`
	BusinessEntityStatusCategory            *string   `json:"businessEntityStatusCategory,omitempty"`
	CourtActionIndicator                    *bool     `json:"courtActionIndicator,omitempty"`
	CustomerNumber                          *int      `json:"customerNumber,omitempty"`
	DecisionDate                            *string   `json:"decisionDate,omitempty"`
	DecisionPetitionTypeCode                *int      `json:"decisionPetitionTypeCode,omitempty"`
	DecisionPetitionTypeCodeDescriptionText *string   `json:"decisionPetitionTypeCodeDescriptionText,omitempty"`
	DecisionTypeCode                        *string   `json:"decisionTypeCode,omitempty"`
	FinalDecidingOfficeName                 *string   `json:"finalDecidingOfficeName,omitempty"`
	FirstApplicantName                      *string   `json:"firstApplicantName,omitempty"`
	FirstInventorToFileIndicator            *bool     `json:"firstInventorToFileIndicator,omitempty"`
	GroupArtUnitNumber                      *string   `json:"groupArtUnitNumber,omitempty"`
	InventionTitle                          *string   `json:"inventionTitle,omitempty"`
	InventorBag                             *[]string `json:"inventorBag,omitempty"`
	LastIngestionDateTime                   *string   `json:"lastIngestionDateTime,omitempty"`
	PatentNumber                            *string   `json:"patentNumber,omitempty"`
	PetitionDecisionRecordIdentifier        *string   `json:"petitionDecisionRecordIdentifier,omitempty"`
	PetitionIssueConsideredTextBag          *[]string `json:"petitionIssueConsideredTextBag,omitempty"`
	PetitionMailDate                        *string   `json:"petitionMailDate,omitempty"`
	ProsecutionStatusCode                   *float32  `json:"prosecutionStatusCode,omitempty"`
	ProsecutionStatusCodeDescriptionText    *string   `json:"prosecutionStatusCodeDescriptionText,omitempty"`
	RuleBag                                 *[]string `json:"ruleBag,omitempty"`
	StatuteBag                              *[]string `json:"statuteBag,omitempty"`
	TechnologyCenter                        *string   `json:"technologyCenter,omitempty"`
}

// PetitionDecisionAndDocuments defines model for PetitionDecisionAndDocuments.
type PetitionDecisionAndDocuments = PetitionDecision

// PetitionDecisionDocument defines model for PetitionDecisionDocument.
type PetitionDecisionDocument struct {
	ApplicationNumberText       *string `json:"applicationNumberText,omitempty"`
	DocumentCode                *string `json:"documentCode,omitempty"`
	DocumentCodeDescriptionText *string `json:"documentCodeDescriptionText,omitempty"`
	DocumentDirectionCategory   *string `json:"documentDirectionCategory,omitempty"`
	DocumentIdentifier          *string `json:"documentIdentifier,omitempty"`
	DownloadOptionBag           *[]struct {
		DocumentURI        *string `json:"documentURI,omitempty"`
		MimeTypeIdentifier *string `json:"mimeTypeIdentifier,omitempty"`
		PageTotalQuantity  *int    `json:"pageTotalQuantity,omitempty"`
	} `json:"downloadOptionBag,omitempty"`
	OfficialDate *string `json:"officialDate,omitempty"`
}

// PetitionDecisionDownloadRequest defines model for PetitionDecisionDownloadRequest.
type PetitionDecisionDownloadRequest struct {
	Fields  *[]string                 `json:"fields,omitempty"`
	Filters *[]PetitionDecisionFilter `json:"filters,omitempty"`

	// Format Download format. pdf,xml or docs
	Format *PetitionDecisionDownloadRequestFormat `json:"format,omitempty"`

	// Pagination Pagination information.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Q Search by field value or pass opensearch string query syntax
	Q            *string                  `json:"q,omitempty"`
	RangeFilters *[]PetitionDecisionRange `json:"rangeFilters,omitempty"`
	Sort         *[]PetitionDecisionSort  `json:"sort,omitempty"`
}

// PetitionDecisionDownloadRequestFormat Download format. pdf,xml or docs
type PetitionDecisionDownloadRequestFormat string

// PetitionDecisionFacet defines model for PetitionDecisionFacet.
type PetitionDecisionFacet struct {
	ActionTakenByCourtName               *[]PetitionDecisionFacetEntity `json:"actionTakenByCourtName,omitempty"`
	BusinessEntityStatusCategory         *[]PetitionDecisionFacetEntity `json:"businessEntityStatusCategory,omitempty"`
	CourtActionIndicator                 *[]PetitionDecisionFacetEntity `json:"courtActionIndicator,omitempty"`
	DecisionPetitionTypeCode             *[]PetitionDecisionFacetEntity `json:"decisionPetitionTypeCode,omitempty"`
	DecisionTypeCodeDescriptionText      *[]PetitionDecisionFacetEntity `json:"decisionTypeCodeDescriptionText,omitempty"`
	FinalDecidingOfficeName              *[]PetitionDecisionFacetEntity `json:"finalDecidingOfficeName,omitempty"`
	FirstInventorToFileIndicator         *[]PetitionDecisionFacetEntity `json:"firstInventorToFileIndicator,omitempty"`
	PetitionIssueConsideredTextBag       *[]PetitionDecisionFacetEntity `json:"petitionIssueConsideredTextBag,omitempty"`
	ProsecutionStatusCodeDescriptionText *[]PetitionDecisionFacetEntity `json:"prosecutionStatusCodeDescriptionText,omitempty"`
	RuleBag                              *[]PetitionDecisionFacetEntity `json:"ruleBag,omitempty"`
	StatuteBag                           *[]PetitionDecisionFacetEntity `json:"statuteBag,omitempty"`
	TechnologyCenter                     *[]PetitionDecisionFacetEntity `json:"technologyCenter,omitempty"`
}

// PetitionDecisionFacetEntity defines model for PetitionDecisionFacetEntity.
type PetitionDecisionFacetEntity struct {
	Count *int    `json:"count,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PetitionDecisionFilter Add filters to your search request by providing filter name and filter value where name in filter request some field in data set.
type PetitionDecisionFilter struct {
	Name  *string   `json:"name,omitempty"`
	Value *[]string `json:"value,omitempty"`
}

// PetitionDecisionIdentifierResponseBag defines model for PetitionDecisionIdentifierResponseBag.
type PetitionDecisionIdentifierResponseBag struct {
	Count                   *int                            `json:"count,omitempty"`
	PetitionDecisionDataBag *[]PetitionDecisionAndDocuments `json:"petitionDecisionDataBag,omitempty"`
}

// PetitionDecisionRange Range filter. Provide field from dataset and valueFrom and valueTo. If range filter is for date field, date must be in “yyyy-MM-dd” format
type PetitionDecisionRange struct {
	Field     *string `json:"field,omitempty"`
	ValueFrom *string `json:"valueFrom,omitempty"`
	ValueTo   *string `json:"valueTo,omitempty"`
}

// PetitionDecisionResponseBag defines model for PetitionDecisionResponseBag.
type PetitionDecisionResponseBag struct {
	Count                   *int                     `json:"count,omitempty"`
	Facets                  *[]PetitionDecisionFacet `json:"facets,omitempty"`
	PetitionDecisionDataBag *[]PetitionDecision      `json:"petitionDecisionDataBag,omitempty"`
}

// PetitionDecisionSearchRequest defines model for PetitionDecisionSearchRequest.
type PetitionDecisionSearchRequest struct {
	Facets  *[]string                 `json:"facets,omitempty"`
	Fields  *[]string                 `json:"fields,omitempty"`
	Filters *[]PetitionDecisionFilter `json:"filters,omitempty"`

	// Pagination Pagination information.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Q Search by field value or pass opensearch string query syntax
	Q            *string                  `json:"q,omitempty"`
	RangeFilters *[]PetitionDecisionRange `json:"rangeFilters,omitempty"`
	Sort         *[]PetitionDecisionSort  `json:"sort,omitempty"`
}

// PetitionDecisionSort Sort you search result by providing field to be sorted and sort order
type PetitionDecisionSort struct {
	Field *string `json:"field,omitempty"`

	// Order Sort order. e.g. Asc, ASC, Desc, desc, DESC
	Order *PetitionDecisionSortOrder `json:"order,omitempty"`
}

// PetitionDecisionSortOrder Sort order. e.g. Asc, ASC, Desc, desc, DESC
type PetitionDecisionSortOrder string

// ProductFileBag defines model for ProductFileBag.
type ProductFileBag struct {
	Count       *int `json:"count,omitempty"`
	FileDataBag *[]struct {
		FileDataFromDate         *openapi_types.Date `json:"fileDataFromDate,omitempty"`
		FileDataToDate           *openapi_types.Date `json:"fileDataToDate,omitempty"`
		FileDate                 *openapi_types.Date `json:"fileDate,omitempty"`
		FileDownloadURI          *string             `json:"fileDownloadURI,omitempty"`
		FileLastModifiedDateTime *string             `json:"fileLastModifiedDateTime,omitempty"`
		FileName                 *string             `json:"fileName,omitempty"`
		FileReleaseDate          *string             `json:"fileReleaseDate,omitempty"`
		FileSize                 *float32            `json:"fileSize,omitempty"`
		FileTypeText             *string             `json:"fileTypeText,omitempty"`
	} `json:"fileDataBag,omitempty"`
}

// Range Range filter. Provide field from dataset and valueFrom and valueTo. If range filter is for date field, date must be in “yyyy-MM-dd” format
type Range struct {
	Field     *string `json:"field,omitempty"`
	ValueFrom *string `json:"valueFrom,omitempty"`
	ValueTo   *string `json:"valueTo,omitempty"`
}

// RecordAttorney An attorney selected by the applicant or owner of an intellectual property to represent them before the national office.
type RecordAttorney struct {
	AttorneyBag *[]struct {
		ActiveIndicator    *string `json:"activeIndicator,omitempty"`
		AttorneyAddressBag *[]struct {
			AddressLineOneText   *string `json:"addressLineOneText,omitempty"`
			AddressLineTwoText   *string `json:"addressLineTwoText,omitempty"`
			CityName             *string `json:"cityName,omitempty"`
			CountryCode          *string `json:"countryCode,omitempty"`
			CountryName          *string `json:"countryName,omitempty"`
			GeographicRegionCode *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName *string `json:"geographicRegionName,omitempty"`
			NameLineOneText      *string `json:"nameLineOneText,omitempty"`
			NameLineTwoText      *string `json:"nameLineTwoText,omitempty"`
			PostalCode           *string `json:"postalCode,omitempty"`
		} `json:"attorneyAddressBag,omitempty"`
		FirstName                      *string `json:"firstName,omitempty"`
		LastName                       *string `json:"lastName,omitempty"`
		MiddleName                     *string `json:"middleName,omitempty"`
		NamePrefix                     *string `json:"namePrefix,omitempty"`
		NameSuffix                     *string `json:"nameSuffix,omitempty"`
		RegisteredPractitionerCategory *string `json:"registeredPractitionerCategory,omitempty"`
		RegistrationNumber             *string `json:"registrationNumber,omitempty"`
		TelecommunicationAddressBag    *[]struct {
			ExtensionNumber         *string `json:"extensionNumber,omitempty"`
			TelecomTypeCode         *string `json:"telecomTypeCode,omitempty"`
			TelecommunicationNumber *string `json:"telecommunicationNumber,omitempty"`
		} `json:"telecommunicationAddressBag,omitempty"`
	} `json:"attorneyBag,omitempty"`

	// CustomerNumberCorrespondenceData Correspondence address of the application inherited from the customer.
	CustomerNumberCorrespondenceData *struct {
		OrganizationStandardName  *string  `json:"organizationStandardName,omitempty"`
		PatronIdentifier          *float32 `json:"patronIdentifier,omitempty"`
		PowerOfAttorneyAddressBag *[]struct {
			AddressLineOneText   *string `json:"addressLineOneText,omitempty"`
			AddressLineTwoText   *string `json:"addressLineTwoText,omitempty"`
			CityName             *string `json:"cityName,omitempty"`
			CountryCode          *string `json:"countryCode,omitempty"`
			CountryName          *string `json:"countryName,omitempty"`
			GeographicRegionCode *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName *string `json:"geographicRegionName,omitempty"`
			NameLineOneText      *string `json:"nameLineOneText,omitempty"`
			PostalCode           *string `json:"postalCode,omitempty"`
		} `json:"powerOfAttorneyAddressBag,omitempty"`
		TelecommunicationAddressBag *[]struct {
			ExtensionNumber         *string `json:"extensionNumber,omitempty"`
			TelecomTypeCode         *string `json:"telecomTypeCode,omitempty"`
			TelecommunicationNumber *string `json:"telecommunicationNumber,omitempty"`
		} `json:"telecommunicationAddressBag,omitempty"`
	} `json:"customerNumberCorrespondenceData,omitempty"`
	PowerOfAttorneyBag *[]struct {
		ActiveIndicator    *string `json:"activeIndicator,omitempty"`
		AttorneyAddressBag *[]struct {
			AddressLineOneText   *string `json:"addressLineOneText,omitempty"`
			AddressLineTwoText   *string `json:"addressLineTwoText,omitempty"`
			CityName             *string `json:"cityName,omitempty"`
			CountryCode          *string `json:"countryCode,omitempty"`
			CountryName          *string `json:"countryName,omitempty"`
			GeographicRegionCode *string `json:"geographicRegionCode,omitempty"`
			GeographicRegionName *string `json:"geographicRegionName,omitempty"`
			NameLineOneText      *string `json:"nameLineOneText,omitempty"`
			NameLineTwoText      *string `json:"nameLineTwoText,omitempty"`
			PostalCode           *string `json:"postalCode,omitempty"`
		} `json:"attorneyAddressBag,omitempty"`
		CountryCode                    *string `json:"countryCode,omitempty"`
		FirstName                      *string `json:"firstName,omitempty"`
		LastName                       *string `json:"lastName,omitempty"`
		MiddleName                     *string `json:"middleName,omitempty"`
		NamePrefix                     *string `json:"namePrefix,omitempty"`
		NameSuffix                     *string `json:"nameSuffix,omitempty"`
		PreferredName                  *string `json:"preferredName,omitempty"`
		RegisteredPractitionerCategory *string `json:"registeredPractitionerCategory,omitempty"`
		RegistrationNumber             *string `json:"registrationNumber,omitempty"`
		TelecommunicationAddressBag    *[]struct {
			ExtensionNumber         *string `json:"extensionNumber,omitempty"`
			TelecomTypeCode         *string `json:"telecomTypeCode,omitempty"`
			TelecommunicationNumber *string `json:"telecommunicationNumber,omitempty"`
		} `json:"telecommunicationAddressBag,omitempty"`
	} `json:"powerOfAttorneyBag,omitempty"`
}

// Response400 defines model for Response400.
type Response400 struct {
	Code              interface{} `json:"code,omitempty"`
	Error             interface{} `json:"error,omitempty"`
	ErrorDetails      interface{} `json:"errorDetails,omitempty"`
	RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
}

// Response403 defines model for Response403.
type Response403 struct {
	Code  interface{} `json:"code,omitempty"`
	Error interface{} `json:"error,omitempty"`
}

// Response404 defines model for Response404.
type Response404 struct {
	Code              interface{} `json:"code,omitempty"`
	Error             interface{} `json:"error,omitempty"`
	ErrorDetails      interface{} `json:"errorDetails,omitempty"`
	RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
}

// Response500 defines model for Response500.
type Response500 struct {
	Code              interface{} `json:"code,omitempty"`
	Error             interface{} `json:"error,omitempty"`
	ErrorDetails      interface{} `json:"errorDetails,omitempty"`
	RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
}

// Sort Sort you search result by providing field to be sorted and sort order
type Sort struct {
	Field *string `json:"field,omitempty"`

	// Order Sort order. e.g. Asc, ASC, Desc, desc, DESC
	Order *SortOrder `json:"order,omitempty"`
}

// SortOrder Sort order. e.g. Asc, ASC, Desc, desc, DESC
type SortOrder string

// Status413 defines model for Status413.
type Status413 struct {
	Code              *int    `json:"code,omitempty"`
	DetailedMessage   *string `json:"detailedMessage,omitempty"`
	Message           *string `json:"message,omitempty"`
	RequestIdentifier *string `json:"requestIdentifier,omitempty"`
}

// StatusCodeSearchRequest defines model for StatusCodeSearchRequest.
type StatusCodeSearchRequest struct {
	// Pagination Pagination information.
	Pagination *Pagination `json:"pagination,omitempty"`

	// Q Search by field value or pass opensearch string query syntax
	Q *string `json:"q,omitempty"`
}

// StatusCodeSearchResponse This json structure represents data fields for status codes search API
type StatusCodeSearchResponse struct {
	Count             *int    `json:"count,omitempty"`
	RequestIdentifier *string `json:"requestIdentifier,omitempty"`
	StatusCodeBag     *[]struct {
		// ApplicationStatusCode Application status code
		ApplicationStatusCode *int `json:"applicationStatusCode,omitempty"`

		// ApplicationStatusDescriptionText Application status code description
		ApplicationStatusDescriptionText *string `json:"applicationStatusDescriptionText,omitempty"`
	} `json:"statusCodeBag,omitempty"`
}

// GetApiV1DatasetsProductsSearchParams defines parameters for GetApiV1DatasetsProductsSearch.
type GetApiV1DatasetsProductsSearchParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort field to be sorted followed by sort order
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Offset Position in the dataset of a particular record
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Facets List of fields names to be faceted upon separated by comma (<b>,</b>)
	Facets *string `form:"facets,omitempty" json:"facets,omitempty"`

	// Fields Limits the response by specifying fields from dataset should be included.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Filters Filter data by supplying filter parameter. Provide field name and its value
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// RangeFilters Filter the data by supplying range of values. Applicable for number and date type fields.
	RangeFilters *string `form:"rangeFilters,omitempty" json:"rangeFilters,omitempty"`
}

// GetApiV1DatasetsProductsProductIdentifierParams defines parameters for GetApiV1DatasetsProductsProductIdentifier.
type GetApiV1DatasetsProductsProductIdentifierParams struct {
	// FileDataFromDate fileDataFromDate
	FileDataFromDate *string `form:"fileDataFromDate,omitempty" json:"fileDataFromDate,omitempty"`

	// FileDataToDate fileDataToDate
	FileDataToDate *string `form:"fileDataToDate,omitempty" json:"fileDataToDate,omitempty"`

	// Offset Number of product file records to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of product file records to collect
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// IncludeFiles value true if product files should be included or false if they should be omitted from the response
	IncludeFiles *string `form:"includeFiles,omitempty" json:"includeFiles,omitempty"`

	// Latest value is true if only the latest product file should be returned for this specific product
	Latest *string `form:"latest,omitempty" json:"latest,omitempty"`
}

// GetApiV1PatentApplicationsSearchParams defines parameters for GetApiV1PatentApplicationsSearch.
type GetApiV1PatentApplicationsSearchParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field to be sorted followed by sort order
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Offset Position in the dataset of a particular record
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Facets List of fields names to be faceted upon separated by comma (<b>,</b>)
	Facets *string `form:"facets,omitempty" json:"facets,omitempty"`

	// Fields Limits the response by specifying which fields from dataset should be included.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Filters Filter data by supplying filter parameter. Provide field name and its value.
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// RangeFilters Filter the data by supplying range of values. Applicable for number and date type fields.
	RangeFilters *string `form:"rangeFilters,omitempty" json:"rangeFilters,omitempty"`
}

// GetApiV1PatentApplicationsSearchDownloadParams defines parameters for GetApiV1PatentApplicationsSearchDownload.
type GetApiV1PatentApplicationsSearchDownloadParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort field to be sorted followed by sort order
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Offset Page number to begin with
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields Limits the response by specifying fields from dataset should be included.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Filters Filter data by supplying filter parameter. Provide field name and its value
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// RangeFilters Filter the data by supplying range of values. Applicable for number and date type fields.
	RangeFilters *string `form:"rangeFilters,omitempty" json:"rangeFilters,omitempty"`

	// Format Download Format
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams defines parameters for GetApiV1PatentApplicationsApplicationNumberTextDocuments.
type GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams struct {
	// DocumentCodes single or multiple comma separated document codes
	DocumentCodes *string `form:"documentCodes,omitempty" json:"documentCodes,omitempty"`

	// OfficialDateFrom Search by document official date from
	OfficialDateFrom *string `form:"officialDateFrom,omitempty" json:"officialDateFrom,omitempty"`

	// OfficialDateTo Search by document official date to
	OfficialDateTo *string `form:"officialDateTo,omitempty" json:"officialDateTo,omitempty"`
}

// GetApiV1PatentStatusCodesParams defines parameters for GetApiV1PatentStatusCodes.
type GetApiV1PatentStatusCodesParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Position in the dataset of a particular record
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetApiV1PetitionDecisionsSearchParams defines parameters for GetApiV1PetitionDecisionsSearch.
type GetApiV1PetitionDecisionsSearchParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort field to be sorted followed by sort order
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Offset Position in the dataset of a particular record
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Facets List of fields names to be faceted upon separated by comma (<b>,</b>)
	Facets *string `form:"facets,omitempty" json:"facets,omitempty"`

	// Fields Limits the response by specifying fields from dataset should be included.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Filters Filter data by supplying filter parameter. Provide field name and its value
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// RangeFilters Filter the data by supplying range of values. Applicable for number and date type fields.
	RangeFilters *string `form:"rangeFilters,omitempty" json:"rangeFilters,omitempty"`
}

// GetApiV1PetitionDecisionsSearchDownloadParams defines parameters for GetApiV1PetitionDecisionsSearchDownload.
type GetApiV1PetitionDecisionsSearchDownloadParams struct {
	// Q A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases ("").
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort field to be sorted followed by sort order
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Offset Position in the dataset of a particular record
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of results returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields Limits the response by specifying fields from dataset should be included.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Filters Filter data by supplying filter parameter. Provide field name and its value
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// RangeFilters Filter the data by supplying range of values. Applicable for number and date type fields.
	RangeFilters *string `form:"rangeFilters,omitempty" json:"rangeFilters,omitempty"`

	// Format Download Format
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams defines parameters for GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier.
type GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams struct {
	// IncludeDocuments This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response
	IncludeDocuments *bool `form:"includeDocuments,omitempty" json:"includeDocuments,omitempty"`
}

// PostApiV1PatentApplicationsSearchJSONRequestBody defines body for PostApiV1PatentApplicationsSearch for application/json ContentType.
type PostApiV1PatentApplicationsSearchJSONRequestBody = PatentSearchRequest

// PostApiV1PatentApplicationsSearchDownloadJSONRequestBody defines body for PostApiV1PatentApplicationsSearchDownload for application/json ContentType.
type PostApiV1PatentApplicationsSearchDownloadJSONRequestBody = PatentDownloadRequest

// PostApiV1PatentStatusCodesJSONRequestBody defines body for PostApiV1PatentStatusCodes for application/json ContentType.
type PostApiV1PatentStatusCodesJSONRequestBody = StatusCodeSearchRequest

// PostApiV1PetitionDecisionsSearchJSONRequestBody defines body for PostApiV1PetitionDecisionsSearch for application/json ContentType.
type PostApiV1PetitionDecisionsSearchJSONRequestBody = PetitionDecisionSearchRequest

// PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody defines body for PostApiV1PetitionDecisionsSearchDownload for application/json ContentType.
type PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody = PetitionDecisionDownloadRequest
