// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1DatasetsProductsFilesProductIdentifierFileName request
	GetApiV1DatasetsProductsFilesProductIdentifierFileName(ctx context.Context, productIdentifier string, fileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetsProductsSearch request
	GetApiV1DatasetsProductsSearch(ctx context.Context, params *GetApiV1DatasetsProductsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DatasetsProductsProductIdentifier request
	GetApiV1DatasetsProductsProductIdentifier(ctx context.Context, productIdentifier string, params *GetApiV1DatasetsProductsProductIdentifierParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsSearch request
	GetApiV1PatentApplicationsSearch(ctx context.Context, params *GetApiV1PatentApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PatentApplicationsSearchWithBody request with any body
	PostApiV1PatentApplicationsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PatentApplicationsSearch(ctx context.Context, body PostApiV1PatentApplicationsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsSearchDownload request
	GetApiV1PatentApplicationsSearchDownload(ctx context.Context, params *GetApiV1PatentApplicationsSearchDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PatentApplicationsSearchDownloadWithBody request with any body
	PostApiV1PatentApplicationsSearchDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PatentApplicationsSearchDownload(ctx context.Context, body PostApiV1PatentApplicationsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberText request
	GetApiV1PatentApplicationsApplicationNumberText(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAdjustment request
	GetApiV1PatentApplicationsApplicationNumberTextAdjustment(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAssignment request
	GetApiV1PatentApplicationsApplicationNumberTextAssignment(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocuments request
	GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocuments(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAttorney request
	GetApiV1PatentApplicationsApplicationNumberTextAttorney(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextContinuity request
	GetApiV1PatentApplicationsApplicationNumberTextContinuity(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextDocuments request
	GetApiV1PatentApplicationsApplicationNumberTextDocuments(ctx context.Context, applicationNumberText string, params *GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextForeignPriority request
	GetApiV1PatentApplicationsApplicationNumberTextForeignPriority(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextMetaData request
	GetApiV1PatentApplicationsApplicationNumberTextMetaData(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentApplicationsApplicationNumberTextTransactions request
	GetApiV1PatentApplicationsApplicationNumberTextTransactions(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PatentStatusCodes request
	GetApiV1PatentStatusCodes(ctx context.Context, params *GetApiV1PatentStatusCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PatentStatusCodesWithBody request with any body
	PostApiV1PatentStatusCodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PatentStatusCodes(ctx context.Context, body PostApiV1PatentStatusCodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PetitionDecisionsSearch request
	GetApiV1PetitionDecisionsSearch(ctx context.Context, params *GetApiV1PetitionDecisionsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PetitionDecisionsSearchWithBody request with any body
	PostApiV1PetitionDecisionsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PetitionDecisionsSearch(ctx context.Context, body PostApiV1PetitionDecisionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PetitionDecisionsSearchDownload request
	GetApiV1PetitionDecisionsSearchDownload(ctx context.Context, params *GetApiV1PetitionDecisionsSearchDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PetitionDecisionsSearchDownloadWithBody request with any body
	PostApiV1PetitionDecisionsSearchDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PetitionDecisionsSearchDownload(ctx context.Context, body PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier request
	GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier(ctx context.Context, petitionDecisionRecordIdentifier string, params *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1DatasetsProductsFilesProductIdentifierFileName(ctx context.Context, productIdentifier string, fileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetsProductsFilesProductIdentifierFileNameRequest(c.Server, productIdentifier, fileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetsProductsSearch(ctx context.Context, params *GetApiV1DatasetsProductsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetsProductsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DatasetsProductsProductIdentifier(ctx context.Context, productIdentifier string, params *GetApiV1DatasetsProductsProductIdentifierParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DatasetsProductsProductIdentifierRequest(c.Server, productIdentifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsSearch(ctx context.Context, params *GetApiV1PatentApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentApplicationsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentApplicationsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentApplicationsSearch(ctx context.Context, body PostApiV1PatentApplicationsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentApplicationsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsSearchDownload(ctx context.Context, params *GetApiV1PatentApplicationsSearchDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsSearchDownloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentApplicationsSearchDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentApplicationsSearchDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentApplicationsSearchDownload(ctx context.Context, body PostApiV1PatentApplicationsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentApplicationsSearchDownloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberText(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextAdjustment(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextAdjustmentRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextAssignment(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextAssignmentRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocuments(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextAttorney(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextAttorneyRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextContinuity(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextContinuityRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextDocuments(ctx context.Context, applicationNumberText string, params *GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextDocumentsRequest(c.Server, applicationNumberText, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextForeignPriority(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextMetaData(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextMetaDataRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentApplicationsApplicationNumberTextTransactions(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentApplicationsApplicationNumberTextTransactionsRequest(c.Server, applicationNumberText)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PatentStatusCodes(ctx context.Context, params *GetApiV1PatentStatusCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PatentStatusCodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentStatusCodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentStatusCodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PatentStatusCodes(ctx context.Context, body PostApiV1PatentStatusCodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PatentStatusCodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PetitionDecisionsSearch(ctx context.Context, params *GetApiV1PetitionDecisionsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PetitionDecisionsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PetitionDecisionsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PetitionDecisionsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PetitionDecisionsSearch(ctx context.Context, body PostApiV1PetitionDecisionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PetitionDecisionsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PetitionDecisionsSearchDownload(ctx context.Context, params *GetApiV1PetitionDecisionsSearchDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PetitionDecisionsSearchDownloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PetitionDecisionsSearchDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PetitionDecisionsSearchDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PetitionDecisionsSearchDownload(ctx context.Context, body PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PetitionDecisionsSearchDownloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier(ctx context.Context, petitionDecisionRecordIdentifier string, params *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierRequest(c.Server, petitionDecisionRecordIdentifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1DatasetsProductsFilesProductIdentifierFileNameRequest generates requests for GetApiV1DatasetsProductsFilesProductIdentifierFileName
func NewGetApiV1DatasetsProductsFilesProductIdentifierFileNameRequest(server string, productIdentifier string, fileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productIdentifier", runtime.ParamLocationPath, productIdentifier)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/datasets/products/files/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetsProductsSearchRequest generates requests for GetApiV1DatasetsProductsSearch
func NewGetApiV1DatasetsProductsSearchRequest(server string, params *GetApiV1DatasetsProductsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/datasets/products/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facets", runtime.ParamLocationQuery, *params.Facets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeFilters", runtime.ParamLocationQuery, *params.RangeFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DatasetsProductsProductIdentifierRequest generates requests for GetApiV1DatasetsProductsProductIdentifier
func NewGetApiV1DatasetsProductsProductIdentifierRequest(server string, productIdentifier string, params *GetApiV1DatasetsProductsProductIdentifierParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productIdentifier", runtime.ParamLocationPath, productIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/datasets/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FileDataFromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileDataFromDate", runtime.ParamLocationQuery, *params.FileDataFromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileDataToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileDataToDate", runtime.ParamLocationQuery, *params.FileDataToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeFiles", runtime.ParamLocationQuery, *params.IncludeFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Latest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsSearchRequest generates requests for GetApiV1PatentApplicationsSearch
func NewGetApiV1PatentApplicationsSearchRequest(server string, params *GetApiV1PatentApplicationsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facets", runtime.ParamLocationQuery, *params.Facets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeFilters", runtime.ParamLocationQuery, *params.RangeFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PatentApplicationsSearchRequest calls the generic PostApiV1PatentApplicationsSearch builder with application/json body
func NewPostApiV1PatentApplicationsSearchRequest(server string, body PostApiV1PatentApplicationsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PatentApplicationsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PatentApplicationsSearchRequestWithBody generates requests for PostApiV1PatentApplicationsSearch with any type of body
func NewPostApiV1PatentApplicationsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PatentApplicationsSearchDownloadRequest generates requests for GetApiV1PatentApplicationsSearchDownload
func NewGetApiV1PatentApplicationsSearchDownloadRequest(server string, params *GetApiV1PatentApplicationsSearchDownloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/search/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeFilters", runtime.ParamLocationQuery, *params.RangeFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PatentApplicationsSearchDownloadRequest calls the generic PostApiV1PatentApplicationsSearchDownload builder with application/json body
func NewPostApiV1PatentApplicationsSearchDownloadRequest(server string, body PostApiV1PatentApplicationsSearchDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PatentApplicationsSearchDownloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PatentApplicationsSearchDownloadRequestWithBody generates requests for PostApiV1PatentApplicationsSearchDownload with any type of body
func NewPostApiV1PatentApplicationsSearchDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/search/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextRequest generates requests for GetApiV1PatentApplicationsApplicationNumberText
func NewGetApiV1PatentApplicationsApplicationNumberTextRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextAdjustmentRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextAdjustment
func NewGetApiV1PatentApplicationsApplicationNumberTextAdjustmentRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/adjustment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextAssignmentRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextAssignment
func NewGetApiV1PatentApplicationsApplicationNumberTextAssignmentRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/assignment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocuments
func NewGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/associated-documents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextAttorneyRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextAttorney
func NewGetApiV1PatentApplicationsApplicationNumberTextAttorneyRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/attorney", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextContinuityRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextContinuity
func NewGetApiV1PatentApplicationsApplicationNumberTextContinuityRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/continuity", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextDocumentsRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextDocuments
func NewGetApiV1PatentApplicationsApplicationNumberTextDocumentsRequest(server string, applicationNumberText string, params *GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/documents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DocumentCodes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "documentCodes", runtime.ParamLocationQuery, *params.DocumentCodes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OfficialDateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "officialDateFrom", runtime.ParamLocationQuery, *params.OfficialDateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OfficialDateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "officialDateTo", runtime.ParamLocationQuery, *params.OfficialDateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextForeignPriority
func NewGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/foreign-priority", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextMetaDataRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextMetaData
func NewGetApiV1PatentApplicationsApplicationNumberTextMetaDataRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/meta-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentApplicationsApplicationNumberTextTransactionsRequest generates requests for GetApiV1PatentApplicationsApplicationNumberTextTransactions
func NewGetApiV1PatentApplicationsApplicationNumberTextTransactionsRequest(server string, applicationNumberText string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationNumberText", runtime.ParamLocationPath, applicationNumberText)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/applications/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PatentStatusCodesRequest generates requests for GetApiV1PatentStatusCodes
func NewGetApiV1PatentStatusCodesRequest(server string, params *GetApiV1PatentStatusCodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/status-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PatentStatusCodesRequest calls the generic PostApiV1PatentStatusCodes builder with application/json body
func NewPostApiV1PatentStatusCodesRequest(server string, body PostApiV1PatentStatusCodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PatentStatusCodesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PatentStatusCodesRequestWithBody generates requests for PostApiV1PatentStatusCodes with any type of body
func NewPostApiV1PatentStatusCodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/patent/status-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PetitionDecisionsSearchRequest generates requests for GetApiV1PetitionDecisionsSearch
func NewGetApiV1PetitionDecisionsSearchRequest(server string, params *GetApiV1PetitionDecisionsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/petition/decisions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facets", runtime.ParamLocationQuery, *params.Facets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeFilters", runtime.ParamLocationQuery, *params.RangeFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PetitionDecisionsSearchRequest calls the generic PostApiV1PetitionDecisionsSearch builder with application/json body
func NewPostApiV1PetitionDecisionsSearchRequest(server string, body PostApiV1PetitionDecisionsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PetitionDecisionsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PetitionDecisionsSearchRequestWithBody generates requests for PostApiV1PetitionDecisionsSearch with any type of body
func NewPostApiV1PetitionDecisionsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/petition/decisions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PetitionDecisionsSearchDownloadRequest generates requests for GetApiV1PetitionDecisionsSearchDownload
func NewGetApiV1PetitionDecisionsSearchDownloadRequest(server string, params *GetApiV1PetitionDecisionsSearchDownloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/petition/decisions/search/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rangeFilters", runtime.ParamLocationQuery, *params.RangeFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PetitionDecisionsSearchDownloadRequest calls the generic PostApiV1PetitionDecisionsSearchDownload builder with application/json body
func NewPostApiV1PetitionDecisionsSearchDownloadRequest(server string, body PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PetitionDecisionsSearchDownloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PetitionDecisionsSearchDownloadRequestWithBody generates requests for PostApiV1PetitionDecisionsSearchDownload with any type of body
func NewPostApiV1PetitionDecisionsSearchDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/petition/decisions/search/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierRequest generates requests for GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier
func NewGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierRequest(server string, petitionDecisionRecordIdentifier string, params *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petitionDecisionRecordIdentifier", runtime.ParamLocationPath, petitionDecisionRecordIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/petition/decisions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDocuments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDocuments", runtime.ParamLocationQuery, *params.IncludeDocuments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1DatasetsProductsFilesProductIdentifierFileNameWithResponse request
	GetApiV1DatasetsProductsFilesProductIdentifierFileNameWithResponse(ctx context.Context, productIdentifier string, fileName string, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse, error)

	// GetApiV1DatasetsProductsSearchWithResponse request
	GetApiV1DatasetsProductsSearchWithResponse(ctx context.Context, params *GetApiV1DatasetsProductsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsSearchResponse, error)

	// GetApiV1DatasetsProductsProductIdentifierWithResponse request
	GetApiV1DatasetsProductsProductIdentifierWithResponse(ctx context.Context, productIdentifier string, params *GetApiV1DatasetsProductsProductIdentifierParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsProductIdentifierResponse, error)

	// GetApiV1PatentApplicationsSearchWithResponse request
	GetApiV1PatentApplicationsSearchWithResponse(ctx context.Context, params *GetApiV1PatentApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsSearchResponse, error)

	// PostApiV1PatentApplicationsSearchWithBodyWithResponse request with any body
	PostApiV1PatentApplicationsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchResponse, error)

	PostApiV1PatentApplicationsSearchWithResponse(ctx context.Context, body PostApiV1PatentApplicationsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchResponse, error)

	// GetApiV1PatentApplicationsSearchDownloadWithResponse request
	GetApiV1PatentApplicationsSearchDownloadWithResponse(ctx context.Context, params *GetApiV1PatentApplicationsSearchDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsSearchDownloadResponse, error)

	// PostApiV1PatentApplicationsSearchDownloadWithBodyWithResponse request with any body
	PostApiV1PatentApplicationsSearchDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchDownloadResponse, error)

	PostApiV1PatentApplicationsSearchDownloadWithResponse(ctx context.Context, body PostApiV1PatentApplicationsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchDownloadResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAdjustmentWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextAdjustmentWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAssignmentWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextAssignmentWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextAttorneyWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextAttorneyWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextContinuityWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextContinuityWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextDocumentsWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextDocumentsWithResponse(ctx context.Context, applicationNumberText string, params *GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextMetaDataWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextMetaDataWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse, error)

	// GetApiV1PatentApplicationsApplicationNumberTextTransactionsWithResponse request
	GetApiV1PatentApplicationsApplicationNumberTextTransactionsWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse, error)

	// GetApiV1PatentStatusCodesWithResponse request
	GetApiV1PatentStatusCodesWithResponse(ctx context.Context, params *GetApiV1PatentStatusCodesParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentStatusCodesResponse, error)

	// PostApiV1PatentStatusCodesWithBodyWithResponse request with any body
	PostApiV1PatentStatusCodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentStatusCodesResponse, error)

	PostApiV1PatentStatusCodesWithResponse(ctx context.Context, body PostApiV1PatentStatusCodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentStatusCodesResponse, error)

	// GetApiV1PetitionDecisionsSearchWithResponse request
	GetApiV1PetitionDecisionsSearchWithResponse(ctx context.Context, params *GetApiV1PetitionDecisionsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsSearchResponse, error)

	// PostApiV1PetitionDecisionsSearchWithBodyWithResponse request with any body
	PostApiV1PetitionDecisionsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchResponse, error)

	PostApiV1PetitionDecisionsSearchWithResponse(ctx context.Context, body PostApiV1PetitionDecisionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchResponse, error)

	// GetApiV1PetitionDecisionsSearchDownloadWithResponse request
	GetApiV1PetitionDecisionsSearchDownloadWithResponse(ctx context.Context, params *GetApiV1PetitionDecisionsSearchDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsSearchDownloadResponse, error)

	// PostApiV1PetitionDecisionsSearchDownloadWithBodyWithResponse request with any body
	PostApiV1PetitionDecisionsSearchDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchDownloadResponse, error)

	PostApiV1PetitionDecisionsSearchDownloadWithResponse(ctx context.Context, body PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchDownloadResponse, error)

	// GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierWithResponse request
	GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierWithResponse(ctx context.Context, petitionDecisionRecordIdentifier string, params *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse, error)
}

type GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *struct {
		Code    interface{} `json:"code,omitempty"`
		Message interface{} `json:"message,omitempty"`
	}
	JSON404 *struct {
		Code    interface{} `json:"code,omitempty"`
		Message interface{} `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetsProductsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BdssResponseBag
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetsProductsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetsProductsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DatasetsProductsProductIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BdssResponseProductBag
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1DatasetsProductsProductIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DatasetsProductsProductIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatentDataResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON413 *Status413
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PatentApplicationsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatentDataResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON413 *Status413
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PatentApplicationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PatentApplicationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsSearchDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatentDataResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Message interface{} `json:"message,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsSearchDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsSearchDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PatentApplicationsSearchDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatentDataResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PatentApplicationsSearchDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PatentApplicationsSearchDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatentDataResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetailed     interface{} `json:"errorDetailed,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

			// PatentTermAdjustmentData Patent term adjustment data
			PatentTermAdjustmentData *PatentTermAdjustment `json:"patentTermAdjustmentData,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

			// AssignmentBag The collection of national assignments related to a patent
			AssignmentBag *Assignment `json:"assignmentBag,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

			// GrantDocumentMetaData Contains patent grant zip and xml file meta data for an application
			GrantDocumentMetaData *GrantFileMetaData `json:"grantDocumentMetaData,omitempty"`

			// PgpubDocumentMetaData Contains pgpub zip and xml file meta data for an application
			PgpubDocumentMetaData *PGPubFileMetaData `json:"pgpubDocumentMetaData,omitempty"`
			RequestIdentifier     *string            `json:"requestIdentifier,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

			// RecordAttorney An attorney selected by the applicant or owner of an intellectual property to represent them before the national office.
			RecordAttorney *RecordAttorney `json:"recordAttorney,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string                 `json:"applicationNumberText,omitempty"`
			ChildContinuityBag    *[]ChildContinuityData  `json:"childContinuityBag,omitempty"`
			ParentContinuityBag   *[]ParentContinuityData `json:"parentContinuityBag,omitempty"`
			RequestIdentifier     *string                 `json:"requestIdentifier,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentBag
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string            `json:"applicationNumberText,omitempty"`
			ForeignPriorityBag    *[]ForeignPriority `json:"foreignPriorityBag,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    interface{} `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationMetaData Represents patent application meta data properties
			ApplicationMetaData *ApplicationMetaData `json:"applicationMetaData,omitempty"`

			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string `json:"applicationNumberText,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count                    *int `json:"count,omitempty"`
		PatentFileWrapperDataBag *[]struct {
			// ApplicationNumberText Free format of application number
			ApplicationNumberText *string      `json:"applicationNumberText,omitempty"`
			EventDataBag          *[]EventData `json:"eventDataBag,omitempty"`
		} `json:"patentFileWrapperDataBag,omitempty"`
	}
	JSON400 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PatentStatusCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCodeSearchResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PatentStatusCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PatentStatusCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PatentStatusCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCodeSearchResponse
	JSON400      *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON403 *struct {
		Code  interface{} `json:"code,omitempty"`
		Error interface{} `json:"error,omitempty"`
	}
	JSON404 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
	JSON500 *struct {
		Code              interface{} `json:"code,omitempty"`
		Error             interface{} `json:"error,omitempty"`
		ErrorDetails      interface{} `json:"errorDetails,omitempty"`
		RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PatentStatusCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PatentStatusCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PetitionDecisionsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetitionDecisionResponseBag
	JSON400      *Response400
	JSON403      *Response403
	JSON404      *Response404
	JSON500      *Response500
}

// Status returns HTTPResponse.Status
func (r GetApiV1PetitionDecisionsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PetitionDecisionsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PetitionDecisionsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetitionDecisionResponseBag
	JSON400      *Response400
	JSON403      *Response403
	JSON404      *Response404
	JSON500      *Response500
}

// Status returns HTTPResponse.Status
func (r PostApiV1PetitionDecisionsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PetitionDecisionsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PetitionDecisionsSearchDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetitionDecisionResponseBag
	JSON400      *Response400
	JSON403      *Response403
	JSON404      *Response404
	JSON500      *Response500
}

// Status returns HTTPResponse.Status
func (r GetApiV1PetitionDecisionsSearchDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PetitionDecisionsSearchDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PetitionDecisionsSearchDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetitionDecisionResponseBag
	JSON400      *Response400
	JSON403      *Response403
	JSON404      *Response404
	JSON500      *Response500
}

// Status returns HTTPResponse.Status
func (r PostApiV1PetitionDecisionsSearchDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PetitionDecisionsSearchDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetitionDecisionIdentifierResponseBag
	JSON400      *Response400
	JSON403      *Response403
	JSON404      *Response404
	JSON500      *Response500
}

// Status returns HTTPResponse.Status
func (r GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1DatasetsProductsFilesProductIdentifierFileNameWithResponse request returning *GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse
func (c *ClientWithResponses) GetApiV1DatasetsProductsFilesProductIdentifierFileNameWithResponse(ctx context.Context, productIdentifier string, fileName string, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse, error) {
	rsp, err := c.GetApiV1DatasetsProductsFilesProductIdentifierFileName(ctx, productIdentifier, fileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse(rsp)
}

// GetApiV1DatasetsProductsSearchWithResponse request returning *GetApiV1DatasetsProductsSearchResponse
func (c *ClientWithResponses) GetApiV1DatasetsProductsSearchWithResponse(ctx context.Context, params *GetApiV1DatasetsProductsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsSearchResponse, error) {
	rsp, err := c.GetApiV1DatasetsProductsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetsProductsSearchResponse(rsp)
}

// GetApiV1DatasetsProductsProductIdentifierWithResponse request returning *GetApiV1DatasetsProductsProductIdentifierResponse
func (c *ClientWithResponses) GetApiV1DatasetsProductsProductIdentifierWithResponse(ctx context.Context, productIdentifier string, params *GetApiV1DatasetsProductsProductIdentifierParams, reqEditors ...RequestEditorFn) (*GetApiV1DatasetsProductsProductIdentifierResponse, error) {
	rsp, err := c.GetApiV1DatasetsProductsProductIdentifier(ctx, productIdentifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DatasetsProductsProductIdentifierResponse(rsp)
}

// GetApiV1PatentApplicationsSearchWithResponse request returning *GetApiV1PatentApplicationsSearchResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsSearchWithResponse(ctx context.Context, params *GetApiV1PatentApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsSearchResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsSearchResponse(rsp)
}

// PostApiV1PatentApplicationsSearchWithBodyWithResponse request with arbitrary body returning *PostApiV1PatentApplicationsSearchResponse
func (c *ClientWithResponses) PostApiV1PatentApplicationsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchResponse, error) {
	rsp, err := c.PostApiV1PatentApplicationsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentApplicationsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PatentApplicationsSearchWithResponse(ctx context.Context, body PostApiV1PatentApplicationsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchResponse, error) {
	rsp, err := c.PostApiV1PatentApplicationsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentApplicationsSearchResponse(rsp)
}

// GetApiV1PatentApplicationsSearchDownloadWithResponse request returning *GetApiV1PatentApplicationsSearchDownloadResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsSearchDownloadWithResponse(ctx context.Context, params *GetApiV1PatentApplicationsSearchDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsSearchDownloadResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsSearchDownload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsSearchDownloadResponse(rsp)
}

// PostApiV1PatentApplicationsSearchDownloadWithBodyWithResponse request with arbitrary body returning *PostApiV1PatentApplicationsSearchDownloadResponse
func (c *ClientWithResponses) PostApiV1PatentApplicationsSearchDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchDownloadResponse, error) {
	rsp, err := c.PostApiV1PatentApplicationsSearchDownloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentApplicationsSearchDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PatentApplicationsSearchDownloadWithResponse(ctx context.Context, body PostApiV1PatentApplicationsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentApplicationsSearchDownloadResponse, error) {
	rsp, err := c.PostApiV1PatentApplicationsSearchDownload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentApplicationsSearchDownloadResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberText(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextAdjustmentWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextAdjustmentWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextAdjustment(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextAssignmentWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextAssignmentWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextAssignment(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocuments(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextAttorneyWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextAttorneyWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextAttorney(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextContinuityWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextContinuityWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextContinuity(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextContinuityResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextDocumentsWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextDocumentsWithResponse(ctx context.Context, applicationNumberText string, params *GetApiV1PatentApplicationsApplicationNumberTextDocumentsParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextDocuments(ctx, applicationNumberText, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextForeignPriority(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextMetaDataWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextMetaDataWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextMetaData(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse(rsp)
}

// GetApiV1PatentApplicationsApplicationNumberTextTransactionsWithResponse request returning *GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse
func (c *ClientWithResponses) GetApiV1PatentApplicationsApplicationNumberTextTransactionsWithResponse(ctx context.Context, applicationNumberText string, reqEditors ...RequestEditorFn) (*GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse, error) {
	rsp, err := c.GetApiV1PatentApplicationsApplicationNumberTextTransactions(ctx, applicationNumberText, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse(rsp)
}

// GetApiV1PatentStatusCodesWithResponse request returning *GetApiV1PatentStatusCodesResponse
func (c *ClientWithResponses) GetApiV1PatentStatusCodesWithResponse(ctx context.Context, params *GetApiV1PatentStatusCodesParams, reqEditors ...RequestEditorFn) (*GetApiV1PatentStatusCodesResponse, error) {
	rsp, err := c.GetApiV1PatentStatusCodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PatentStatusCodesResponse(rsp)
}

// PostApiV1PatentStatusCodesWithBodyWithResponse request with arbitrary body returning *PostApiV1PatentStatusCodesResponse
func (c *ClientWithResponses) PostApiV1PatentStatusCodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PatentStatusCodesResponse, error) {
	rsp, err := c.PostApiV1PatentStatusCodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentStatusCodesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PatentStatusCodesWithResponse(ctx context.Context, body PostApiV1PatentStatusCodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PatentStatusCodesResponse, error) {
	rsp, err := c.PostApiV1PatentStatusCodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PatentStatusCodesResponse(rsp)
}

// GetApiV1PetitionDecisionsSearchWithResponse request returning *GetApiV1PetitionDecisionsSearchResponse
func (c *ClientWithResponses) GetApiV1PetitionDecisionsSearchWithResponse(ctx context.Context, params *GetApiV1PetitionDecisionsSearchParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsSearchResponse, error) {
	rsp, err := c.GetApiV1PetitionDecisionsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PetitionDecisionsSearchResponse(rsp)
}

// PostApiV1PetitionDecisionsSearchWithBodyWithResponse request with arbitrary body returning *PostApiV1PetitionDecisionsSearchResponse
func (c *ClientWithResponses) PostApiV1PetitionDecisionsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchResponse, error) {
	rsp, err := c.PostApiV1PetitionDecisionsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PetitionDecisionsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PetitionDecisionsSearchWithResponse(ctx context.Context, body PostApiV1PetitionDecisionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchResponse, error) {
	rsp, err := c.PostApiV1PetitionDecisionsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PetitionDecisionsSearchResponse(rsp)
}

// GetApiV1PetitionDecisionsSearchDownloadWithResponse request returning *GetApiV1PetitionDecisionsSearchDownloadResponse
func (c *ClientWithResponses) GetApiV1PetitionDecisionsSearchDownloadWithResponse(ctx context.Context, params *GetApiV1PetitionDecisionsSearchDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsSearchDownloadResponse, error) {
	rsp, err := c.GetApiV1PetitionDecisionsSearchDownload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PetitionDecisionsSearchDownloadResponse(rsp)
}

// PostApiV1PetitionDecisionsSearchDownloadWithBodyWithResponse request with arbitrary body returning *PostApiV1PetitionDecisionsSearchDownloadResponse
func (c *ClientWithResponses) PostApiV1PetitionDecisionsSearchDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchDownloadResponse, error) {
	rsp, err := c.PostApiV1PetitionDecisionsSearchDownloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PetitionDecisionsSearchDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PetitionDecisionsSearchDownloadWithResponse(ctx context.Context, body PostApiV1PetitionDecisionsSearchDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PetitionDecisionsSearchDownloadResponse, error) {
	rsp, err := c.PostApiV1PetitionDecisionsSearchDownload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PetitionDecisionsSearchDownloadResponse(rsp)
}

// GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierWithResponse request returning *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse
func (c *ClientWithResponses) GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierWithResponse(ctx context.Context, petitionDecisionRecordIdentifier string, params *GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierParams, reqEditors ...RequestEditorFn) (*GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse, error) {
	rsp, err := c.GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifier(ctx, petitionDecisionRecordIdentifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse(rsp)
}

// ParseGetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse parses an HTTP response from a GetApiV1DatasetsProductsFilesProductIdentifierFileNameWithResponse call
func ParseGetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse(rsp *http.Response) (*GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetsProductsFilesProductIdentifierFileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code    interface{} `json:"code,omitempty"`
			Message interface{} `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    interface{} `json:"code,omitempty"`
			Message interface{} `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetsProductsSearchResponse parses an HTTP response from a GetApiV1DatasetsProductsSearchWithResponse call
func ParseGetApiV1DatasetsProductsSearchResponse(rsp *http.Response) (*GetApiV1DatasetsProductsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetsProductsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdssResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1DatasetsProductsProductIdentifierResponse parses an HTTP response from a GetApiV1DatasetsProductsProductIdentifierWithResponse call
func ParseGetApiV1DatasetsProductsProductIdentifierResponse(rsp *http.Response) (*GetApiV1DatasetsProductsProductIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DatasetsProductsProductIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdssResponseProductBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsSearchResponse parses an HTTP response from a GetApiV1PatentApplicationsSearchWithResponse call
func ParseGetApiV1PatentApplicationsSearchResponse(rsp *http.Response) (*GetApiV1PatentApplicationsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest Status413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PatentApplicationsSearchResponse parses an HTTP response from a PostApiV1PatentApplicationsSearchWithResponse call
func ParsePostApiV1PatentApplicationsSearchResponse(rsp *http.Response) (*PostApiV1PatentApplicationsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PatentApplicationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest Status413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsSearchDownloadResponse parses an HTTP response from a GetApiV1PatentApplicationsSearchDownloadWithResponse call
func ParseGetApiV1PatentApplicationsSearchDownloadResponse(rsp *http.Response) (*GetApiV1PatentApplicationsSearchDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsSearchDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message interface{} `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PatentApplicationsSearchDownloadResponse parses an HTTP response from a PostApiV1PatentApplicationsSearchDownloadWithResponse call
func ParsePostApiV1PatentApplicationsSearchDownloadResponse(rsp *http.Response) (*PostApiV1PatentApplicationsSearchDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PatentApplicationsSearchDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetailed     interface{} `json:"errorDetailed,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextAdjustmentWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextAdjustmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

				// PatentTermAdjustmentData Patent term adjustment data
				PatentTermAdjustmentData *PatentTermAdjustment `json:"patentTermAdjustmentData,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextAssignmentWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

				// AssignmentBag The collection of national assignments related to a patent
				AssignmentBag *Assignment `json:"assignmentBag,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextAssociatedDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

				// GrantDocumentMetaData Contains patent grant zip and xml file meta data for an application
				GrantDocumentMetaData *GrantFileMetaData `json:"grantDocumentMetaData,omitempty"`

				// PgpubDocumentMetaData Contains pgpub zip and xml file meta data for an application
				PgpubDocumentMetaData *PGPubFileMetaData `json:"pgpubDocumentMetaData,omitempty"`
				RequestIdentifier     *string            `json:"requestIdentifier,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextAttorneyWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextAttorneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string `json:"applicationNumberText,omitempty"`

				// RecordAttorney An attorney selected by the applicant or owner of an intellectual property to represent them before the national office.
				RecordAttorney *RecordAttorney `json:"recordAttorney,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextContinuityResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextContinuityWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextContinuityResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextContinuityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string                 `json:"applicationNumberText,omitempty"`
				ChildContinuityBag    *[]ChildContinuityData  `json:"childContinuityBag,omitempty"`
				ParentContinuityBag   *[]ParentContinuityData `json:"parentContinuityBag,omitempty"`
				RequestIdentifier     *string                 `json:"requestIdentifier,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextDocumentsWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextForeignPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string            `json:"applicationNumberText,omitempty"`
				ForeignPriorityBag    *[]ForeignPriority `json:"foreignPriorityBag,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextMetaDataWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    interface{} `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationMetaData Represents patent application meta data properties
				ApplicationMetaData *ApplicationMetaData `json:"applicationMetaData,omitempty"`

				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string `json:"applicationNumberText,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse parses an HTTP response from a GetApiV1PatentApplicationsApplicationNumberTextTransactionsWithResponse call
func ParseGetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse(rsp *http.Response) (*GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentApplicationsApplicationNumberTextTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count                    *int `json:"count,omitempty"`
			PatentFileWrapperDataBag *[]struct {
				// ApplicationNumberText Free format of application number
				ApplicationNumberText *string      `json:"applicationNumberText,omitempty"`
				EventDataBag          *[]EventData `json:"eventDataBag,omitempty"`
			} `json:"patentFileWrapperDataBag,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PatentStatusCodesResponse parses an HTTP response from a GetApiV1PatentStatusCodesWithResponse call
func ParseGetApiV1PatentStatusCodesResponse(rsp *http.Response) (*GetApiV1PatentStatusCodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PatentStatusCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCodeSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PatentStatusCodesResponse parses an HTTP response from a PostApiV1PatentStatusCodesWithResponse call
func ParsePostApiV1PatentStatusCodesResponse(rsp *http.Response) (*PostApiV1PatentStatusCodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PatentStatusCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCodeSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Code  interface{} `json:"code,omitempty"`
			Error interface{} `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code              interface{} `json:"code,omitempty"`
			Error             interface{} `json:"error,omitempty"`
			ErrorDetails      interface{} `json:"errorDetails,omitempty"`
			RequestIdentifier interface{} `json:"requestIdentifier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PetitionDecisionsSearchResponse parses an HTTP response from a GetApiV1PetitionDecisionsSearchWithResponse call
func ParseGetApiV1PetitionDecisionsSearchResponse(rsp *http.Response) (*GetApiV1PetitionDecisionsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PetitionDecisionsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetitionDecisionResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Response404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PetitionDecisionsSearchResponse parses an HTTP response from a PostApiV1PetitionDecisionsSearchWithResponse call
func ParsePostApiV1PetitionDecisionsSearchResponse(rsp *http.Response) (*PostApiV1PetitionDecisionsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PetitionDecisionsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetitionDecisionResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Response404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PetitionDecisionsSearchDownloadResponse parses an HTTP response from a GetApiV1PetitionDecisionsSearchDownloadWithResponse call
func ParseGetApiV1PetitionDecisionsSearchDownloadResponse(rsp *http.Response) (*GetApiV1PetitionDecisionsSearchDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PetitionDecisionsSearchDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetitionDecisionResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Response404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PetitionDecisionsSearchDownloadResponse parses an HTTP response from a PostApiV1PetitionDecisionsSearchDownloadWithResponse call
func ParsePostApiV1PetitionDecisionsSearchDownloadResponse(rsp *http.Response) (*PostApiV1PetitionDecisionsSearchDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PetitionDecisionsSearchDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetitionDecisionResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Response404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse parses an HTTP response from a GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierWithResponse call
func ParseGetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse(rsp *http.Response) (*GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PetitionDecisionsPetitionDecisionRecordIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetitionDecisionIdentifierResponseBag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Response404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
